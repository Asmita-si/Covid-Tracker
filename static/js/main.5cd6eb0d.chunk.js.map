{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","name","iso2","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd6eb0d.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n          }`}\r\n        >\r\n            <CardContent>\r\n               {/* title */}\r\n               <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                   {title}\r\n               </Typography>             \r\n\r\n               {/* no. of cases */}\r\n               {/* <h2 className=\"infoBox_cases\">{cases}</h2> */}\r\n               <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n               {/* total  */}\r\n               <Typography  className=\"infoBox_total\" color=\"textSecondary\">\r\n                   {total} Total\r\n               </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204, 16, 52)\",\r\n    // half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 150,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    // rgb: \"rgb(125, 215, 29)\",\r\n    // half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 150,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    // rgb: \"rgb(251, 68, 67)\",\r\n    // half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 150,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n          {/* ></div> */}\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\"\r\nimport \"./map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom} >\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />  \r\n\r\n                 {showDataOnMap(countries, casesType )}            \r\n                \r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    {/* <td><strong>{cases}</strong></td> */}\r\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                </tr>\r\n                \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType ='cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    //lastDataPoint = data[casesType][date];\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType='cases', ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, {useState,useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  InputLabel,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport  Table  from \"./Table\";\nimport  {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MapEvented } from \"react-leaflet\";\n\n//import { util } from \"webpack\";\n\n\n\n\nfunction App() {\n  const [countries, setCountries] =useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response=> response.json() )\n    .then( data => {\n      setCountryInfo(data);\n    } )\n  }, [] )\n\n  useEffect(() => {\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json() )\n      .then( (data )=> {\n           const countries = data.map( (country)=> (\n             {\n               name: country.country,\n               value: country.countryInfo.iso2,\n             }\n           ) );\n\n           const sortedData = sortData(data);\n           setTableData(sortedData);\n           setMapCountries(data);\n           setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async(event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === \"worldwide\" \n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`; \n\n    await fetch(url)\n    .then(response => response.json() )\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n\n    });\n\n  };\n\n  console.log(countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\" >\n          {/* Header */}\n          {/* Title + Select input dropdown field */}\n          <h1>COVID 19 TRACKER</h1>      \n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n\n            </Select>\n          </FormControl>\n        </div>\n  \n        \n        \n\n        <div className=\"app_stats\">\n          {/* InfoBox */}\n          <InfoBox \n          isRed\n          onClick={(e) => setCasesType(\"cases\")}\n          title=\"Coronavirus Cases\" \n          active={casesType === \"cases\"}\n          cases={prettyPrintStat(countryInfo.todayCases)}\n          total={numeral(countryInfo.cases).format(\"0.0a\")} />\n\n          {/* InfoBox */}\n          <InfoBox \n          onClick={(e) => setCasesType(\"recovered\")}\n          active={casesType === \"recovered\"}\n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)}\n          total={numeral(countryInfo.recovered).format(\"0.0a\")} />\n\n          {/* InfoBox */}\n          <InfoBox          \n          onClick={(e) => setCasesType(\"deaths\")}\n          title=\"Deaths\" \n          isRed\n          active={casesType === \"deaths\"}\n          cases={prettyPrintStat(countryInfo.todayDeaths)}\n          total={numeral(countryInfo.deaths).format(\"0.0a\")}/>\n\n        </div>\n\n        {/* Map */}\n        <Map \n          casesType={casesType}\n          countries={mapCountries}\n          center = {mapCenter}\n          zoom = {mapZoom}\n        />\n      </div>\n      \n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live cases by Country</h3>\n          {/* Table */}\n          <Table countries={tableData} />\n\n          {/* graph */}\n          \n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className='app_graph' casesType={casesType} />\n\n        </CardContent>\n        \n      </Card>\n\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}